{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1qz3-AtlSvBfkp_9EyHOxwn9OPjMx-2c1","timestamp":1730729318374}],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# **Sentiments of Product Reviews**\n","\n","**Team members:**\\\n","Bryan Noel Salindeho\\\n","Edmerson Low Soon Xiang\\\n","Fiona Valentin Wironoto Susilo\n"],"metadata":{"id":"XEZ5QupuTxc0"}},{"cell_type":"markdown","source":["## Step 1: Import libraries"],"metadata":{"id":"eoSrz7Kno1Fu"}},{"cell_type":"code","source":["import pandas as pd\n","import os\n","import re\n","import string\n","import nltk\n","from nltk.corpus import stopwords\n","from nltk.tokenize import word_tokenize\n","from nltk.stem import WordNetLemmatizer\n","\n","nltk.download('punkt')\n","nltk.download('punkt_tab')\n","nltk.download('stopwords')\n","nltk.download('wordnet')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vFy4a0Xd-hzU","executionInfo":{"status":"ok","timestamp":1731684378703,"user_tz":-480,"elapsed":460,"user":{"displayName":"Bryan Noel Salindeho","userId":"08284959670553716651"}},"outputId":"d2026c15-cf4f-4922-d285-57af12193bee"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Package punkt is already up-to-date!\n","[nltk_data] Downloading package punkt_tab to /root/nltk_data...\n","[nltk_data]   Package punkt_tab is already up-to-date!\n","[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n","[nltk_data] Downloading package wordnet to /root/nltk_data...\n","[nltk_data]   Package wordnet is already up-to-date!\n"]},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":4}]},{"cell_type":"markdown","source":["## Step 2: Mount Data from Google Drive"],"metadata":{"id":"8_OwDysoraWZ"}},{"cell_type":"markdown","source":["Connect to Google Drive"],"metadata":{"id":"x9w2DQaArgQ4"}},{"cell_type":"code","execution_count":5,"metadata":{"id":"3E0d1ku76eaV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731684410734,"user_tz":-480,"elapsed":23971,"user":{"displayName":"Bryan Noel Salindeho","userId":"08284959670553716651"}},"outputId":"e3e7f1af-b56e-40b8-8688-23e08b945277"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n","My Drive contents:\n"," bert_predictions_newest.csv\t       IE4483.ipynb\n","'Copy of Copy of Final Model IE4483'  'IE4483 Mini Project.gdoc'\n","'Copy of Final Model IE4483'\t      'IE4483 Mini Project Report.gdoc'\n","'Final Model IE4483'\t\t       test.json\n","'Final Model IE4483 Bert Model'        train.json\n"," Glove\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","print(\"My Drive contents:\")\n","!ls \"/content/drive/My Drive/AI DM PROJECT\""]},{"cell_type":"markdown","source":["Find Train Data"],"metadata":{"id":"-gZz-N8Frk46"}},{"cell_type":"code","source":["train_path = '/content/drive/My Drive/AI DM PROJECT/train.json'\n","if os.path.exists(train_path):\n","  print(\"File founded\")\n","  df = pd.read_json(train_path)\n","  print(f\"Data shape: {df.shape}\")\n","  print(\"\\nFirst few rows:\")\n","  print(df.head(2))\n","  train_df = df\n","else:\n","  print(\"File not founded\")\n","\n","if 'reviews' in train_df.columns:\n","    train_df['review_length'] = train_df['reviews'].apply(len)\n","\n","    plt.figure(figsize=(10, 6))\n","    plt.hist(train_df['review_length'], bins=30, color='skyblue', edgecolor='black', alpha=0.7)\n","\n","    plt.title('Review Length Distribution in Training Data', fontsize=16)\n","    plt.xlabel('Review Length (Number of Characters)', fontsize=12)\n","    plt.ylabel('Count', fontsize=12)  # Set y-axis label to 'Count'\n","    plt.grid(True)\n","    plt.show()\n","\n","    print(\"\\nReview Length Statistics:\")\n","    print(train_df['review_length'].describe())\n","else:\n","    print(\"The 'reviews' column is not present in the data.\")\n","\n","if 'sentiments' in train_df.columns:\n","    plt.figure(figsize=(10, 6))\n","    ax = sns.countplot(data=train_df, x='sentiments', palette='Blues', edgecolor='black')\n","\n","    for p in ax.patches:\n","        ax.annotate(f'{p.get_height()}',\n","                    (p.get_x() + p.get_width() / 2., p.get_height()),\n","                    ha='center', va='center', fontsize=12, color='black',\n","                    xytext=(0, 8), textcoords='offset points')\n","\n","    plt.title('Sentiment Distribution (0 and 1) in Training Data', fontsize=16)\n","    plt.xlabel('Sentiment (0: Negative, 1: Positive)', fontsize=12)\n","    plt.ylabel('Count', fontsize=12)\n","    plt.grid(True, axis='y', linestyle='--', alpha=0.7)\n","    plt.xticks([0, 1], ['Negative (0)', 'Positive (1)'])\n","    plt.show()\n","\n","    sentiment_counts = train_df['sentiments'].value_counts()\n","    print(\"\\nSentiment Counts:\")\n","    print(sentiment_counts)\n","else:\n","    print(\"The 'sentiments' column is not present in the data.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"y43KlvEH8f2V","executionInfo":{"status":"ok","timestamp":1731684421448,"user_tz":-480,"elapsed":2244,"user":{"displayName":"Bryan Noel Salindeho","userId":"08284959670553716651"}},"outputId":"45a0e20f-2bea-47b2-ae71-b058aa0f4184"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["File founded\n","Data shape: (7401, 2)\n","\n","First few rows:\n","                                             reviews  sentiments\n","0  I bought this belt for my daughter in-law for ...           1\n","1  The size was perfect and so was the color.  It...           1\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","Review Length Statistics:\n","count    7401.000000\n","mean      300.926632\n","std       285.235376\n","min        24.000000\n","25%       133.000000\n","50%       223.000000\n","75%       373.000000\n","max      5525.000000\n","Name: review_length, dtype: float64\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-6-87f7c3a0d6cc>:31: FutureWarning: \n","\n","Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n","\n","  ax = sns.countplot(data=train_df, x='sentiments', palette='Blues', edgecolor='black')\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","Sentiment Counts:\n","sentiments\n","1    6319\n","0    1082\n","Name: count, dtype: int64\n"]}]},{"cell_type":"markdown","source":["## Step 3: Clean Data\n"],"metadata":{"id":"g84x-5VEdcUD"}},{"cell_type":"code","source":["if train_df is not None:\n","    print(\"Data Info:\")\n","    print(train_df.info())\n","\n","    print(\"\\nMissing Values:\")\n","    print(train_df.isnull().sum())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"APLxRoch_CWv","executionInfo":{"status":"ok","timestamp":1731684426157,"user_tz":-480,"elapsed":441,"user":{"displayName":"Bryan Noel Salindeho","userId":"08284959670553716651"}},"outputId":"bf96e156-4cc8-43aa-cba6-1b66ceebdc74"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Data Info:\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 7401 entries, 0 to 7400\n","Data columns (total 3 columns):\n"," #   Column         Non-Null Count  Dtype \n","---  ------         --------------  ----- \n"," 0   reviews        7401 non-null   object\n"," 1   sentiments     7401 non-null   int64 \n"," 2   review_length  7401 non-null   int64 \n","dtypes: int64(2), object(1)\n","memory usage: 173.6+ KB\n","None\n","\n","Missing Values:\n","reviews          0\n","sentiments       0\n","review_length    0\n","dtype: int64\n"]}]},{"cell_type":"code","source":["class TextCleaner:\n","    def __init__(self):\n","        self.lemmatizer = WordNetLemmatizer()\n","\n","        self.stop_words = set(stopwords.words('english')) - {\n","            'not', 'no', 'nor',\n","            'very', 'too',\n","            'but', 'however',\n","            'above', 'below',\n","            'few', 'more',\n","            'most', 'least',\n","            'should', 'would'\n","        }\n","\n","        self.contractions = {\n","            \"ain't\": \"is not\",\n","            \"aren't\": \"are not\",\n","            \"can't\": \"cannot\",\n","            \"couldn't\": \"could not\",\n","            \"didn't\": \"did not\",\n","            \"doesn't\": \"does not\",\n","            \"don't\": \"do not\",\n","            \"hadn't\": \"had not\",\n","            \"hasn't\": \"has not\",\n","            \"haven't\": \"have not\",\n","            \"he'd\": \"he would\",\n","            \"he'll\": \"he will\",\n","            \"he's\": \"he is\",\n","            \"i'd\": \"i would\",\n","            \"i'll\": \"i will\",\n","            \"i'm\": \"i am\",\n","            \"i've\": \"i have\",\n","            \"isn't\": \"is not\",\n","            \"it's\": \"it is\",\n","            \"let's\": \"let us\",\n","            \"mightn't\": \"might not\",\n","            \"mustn't\": \"must not\",\n","            \"shan't\": \"shall not\",\n","            \"she'd\": \"she would\",\n","            \"she'll\": \"she will\",\n","            \"she's\": \"she is\",\n","            \"shouldn't\": \"should not\",\n","            \"that's\": \"that is\",\n","            \"there's\": \"there is\",\n","            \"they'd\": \"they would\",\n","            \"they'll\": \"they will\",\n","            \"they're\": \"they are\",\n","            \"they've\": \"they have\",\n","            \"wasn't\": \"was not\",\n","            \"we'd\": \"we would\",\n","            \"we're\": \"we are\",\n","            \"weren't\": \"were not\",\n","            \"we've\": \"we have\",\n","            \"what'll\": \"what will\",\n","            \"what're\": \"what are\",\n","            \"what's\": \"what is\",\n","            \"what've\": \"what have\",\n","            \"where's\": \"where is\",\n","            \"who'd\": \"who would\",\n","            \"who'll\": \"who will\",\n","            \"who're\": \"who are\",\n","            \"who's\": \"who is\",\n","            \"who've\": \"who have\",\n","            \"won't\": \"will not\",\n","            \"wouldn't\": \"would not\",\n","            \"you'd\": \"you would\",\n","            \"you'll\": \"you will\",\n","            \"you're\": \"you are\",\n","            \"you've\": \"you have\"\n","        }\n","\n","        self.preserve_terms = {\n","            'x', 'xl', 'xxl', 'xs', 's', 'm', 'l',\n","            '3d', '2d',\n","            'uk', 'us', 'eu',\n","            'mm', 'cm', 'in',\n","            'v1', 'v2', 'v3',\n","        }\n","\n","    def expand_contractions(self, text):\n","        \"\"\"Expand contractions in text.\"\"\"\n","        for contraction, expansion in self.contractions.items():\n","            text = text.replace(contraction, expansion)\n","        return text\n","\n","    def clean_text(self, text, lemmatize=True):\n","        \"\"\"\n","        Clean text with options for different levels of processing.\n","\n","        Args:\n","            text (str): Input text\n","            lemmatize (bool): Whether to apply lemmatization\n","\n","        Returns:\n","            str: Cleaned text\n","        \"\"\"\n","        if not isinstance(text, str):\n","            return \"\"\n","\n","        text = text.lower()\n","\n","        text = self.expand_contractions(text)\n","\n","        text = re.sub(r'(\\d+)x(\\d+)', r'\\1 by \\2', text)\n","        text = re.sub(r'(\\d+)ml', r'\\1 ml', text)\n","        text = re.sub(r'(\\d+)cm', r'\\1 cm', text)\n","        text = re.sub(r'(\\d+)mm', r'\\1 mm', text)\n","        text = re.sub(r'http\\S+|www\\S+|https\\S+', '', text)\n","        text = re.sub(r'\\S+@\\S+', '', text)\n","        text = re.sub(r'\\s+', ' ', text)\n","        text = re.sub(r'\\n+', ' ', text)\n","        text = text.translate(str.maketrans('', '', string.punctuation.replace('-', '')))\n","\n","        words = word_tokenize(text)\n","\n","        cleaned_words = []\n","        for word in words:\n","            if word.lower() in self.preserve_terms:\n","                cleaned_words.append(word)\n","                continue\n","\n","            if word not in self.stop_words:\n","                if lemmatize:\n","                    word = self.lemmatizer.lemmatize(word)\n","                cleaned_words.append(word)\n","\n","        text = ' '.join(cleaned_words)\n","        text = re.sub(r'\\s+', ' ', text).strip()\n","\n","        return text\n","\n","    def process_reviews(self, reviews, show_samples=5):\n","        \"\"\"Process a series of reviews and optionally show samples.\"\"\"\n","        cleaned_reviews = []\n","\n","        for i, review in enumerate(reviews):\n","            cleaned = self.clean_text(review)\n","            cleaned_reviews.append(cleaned)\n","\n","            if show_samples and i < show_samples:\n","                print(f\"\\nOriginal: {review[:100]}...\")\n","                print(f\"Cleaned:  {cleaned[:100]}...\")\n","\n","        return cleaned_reviews\n","\n","cleaner = TextCleaner()\n","\n","if 'train_df' in locals():\n","    print(\"\\nProcessing training data:\")\n","    train_df['cleaned_reviews'] = cleaner.process_reviews(train_df['reviews'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ncw_Sqw7_MPw","executionInfo":{"status":"ok","timestamp":1731684438320,"user_tz":-480,"elapsed":10474,"user":{"displayName":"Bryan Noel Salindeho","userId":"08284959670553716651"}},"outputId":"df18c4be-12f6-441d-99ea-5accd0943f43"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Processing training data:\n","\n","Original: I bought this belt for my daughter in-law for Christmas and she loved it...\n","Cleaned:  bought belt daughter in-law christmas loved...\n","\n","Original: The size was perfect and so was the color.  It looked just like it did on the web page:)...\n","Cleaned:  size perfect color looked like web page...\n","\n","Original: Fits and feels good, esp. for doing a swim race.  Highly recommend this.  \n","\n","Be careful when wearing ...\n","Cleaned:  fit feel good esp swim race highly recommend careful wearing board short velcro zipper strap materia...\n","\n","Original: These socks are absolutely the best. I take pilates classes and if it is hot your feet can slip off ...\n","Cleaned:  sock absolutely best take pilate class hot foot slip mat not good in middle side plankanyway sock ke...\n","\n","Original: Thank you so much for the speedy delivery they came in time for the rehearsal dinner.  I loved the r...\n","Cleaned:  thank much speedy delivery came in time rehearsal dinner loved red silk neck tie really made usher s...\n"]}]},{"cell_type":"markdown","source":["## Step 4: Apply Vectorizer"],"metadata":{"id":"RHRF8OgStYC-"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.model_selection import train_test_split\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from collections import Counter\n","import re\n","from nltk.corpus import stopwords\n","from sklearn.pipeline import Pipeline\n","\n","\n","class AdvancedVectorizer:\n","    def __init__(self,\n","                 max_features=5000,\n","                 ngram_range=(1, 3),\n","                 max_df=0.85,\n","                 min_df=2,\n","                 custom_stop_words=None):\n","        self.max_features = max_features\n","        self.ngram_range = ngram_range\n","        self.max_df = max_df\n","        self.min_df = min_df\n","        self.custom_stop_words = custom_stop_words or set()\n","        self.fitted = False\n","\n","        self.min_word_length = 3\n","        self.max_word_length = 25\n","\n","        self.pipeline = self._create_pipeline()\n","\n","    def _is_valid_feature(self, feature):\n","        \"\"\"Check if a feature is valid based on enhanced criteria\"\"\"\n","        if re.match(r'^\\d+$', feature):\n","            return False\n","\n","        if len(feature) < self.min_word_length or len(feature) > self.max_word_length:\n","            return False\n","\n","        if sum(c.isdigit() for c in feature) > len(feature) * 0.5:\n","            return False\n","\n","        if not any(c.isalpha() for c in feature):\n","            return False\n","\n","        return True\n","\n","    def _create_pipeline(self):\n","        \"\"\"Create sklearn pipeline with enhanced TF-IDF\"\"\"\n","        token_pattern = r'(?u)\\b[A-Za-z][A-Za-z0-9-_\\.]{2,}\\b'\n","\n","        return Pipeline([\n","            ('tfidf', TfidfVectorizer(\n","                max_features=self.max_features,\n","                ngram_range=self.ngram_range,\n","                max_df=self.max_df,\n","                min_df=self.min_df,\n","                stop_words=list(set(self._get_stop_words() + list(self.custom_stop_words))),\n","                sublinear_tf=True,\n","                norm='l2',\n","                smooth_idf=True,\n","                strip_accents='unicode',\n","                analyzer='word',\n","                token_pattern=token_pattern\n","            ))\n","        ])\n","\n","    def _get_stop_words(self):\n","        \"\"\"Get enhanced stopwords list\"\"\"\n","        stop_words = list(stopwords.words('english'))\n","\n","        preserve_words = {\n","            'not', 'no', 'nor', 'very', 'too', 'only', 'but',\n","            'more', 'most', 'least', 'better', 'worse',\n","            'good', 'bad', 'great', 'poor', 'excellent', 'terrible',\n","            'big', 'small', 'large', 'tiny', 'huge',\n","            'expensive', 'cheap', 'worth', 'price',\n","            'quality', 'size', 'color', 'fit', 'material'\n","        }\n","\n","        return [w for w in stop_words if w not in preserve_words]\n","\n","    def fit(self, texts):\n","        \"\"\"Fit the vectorizer to the texts\"\"\"\n","        self.pipeline.fit(texts)\n","        self.fitted = True\n","        self.feature_names = self.pipeline.named_steps['tfidf'].get_feature_names_out()\n","        return self\n","\n","    def transform(self, texts):\n","        \"\"\"Transform texts using the fitted pipeline\"\"\"\n","        if not self.fitted:\n","            raise ValueError(\"The vectorizer pipeline is not fitted yet. Call 'fit' first.\")\n","        return self.pipeline.transform(texts)\n","\n","    def fit_transform(self, texts):\n","        \"\"\"Fit the vectorizer and transform the texts\"\"\"\n","        self.transformed_data = self.pipeline.fit_transform(texts)\n","        self.fitted = True\n","        self.feature_names = self.pipeline.named_steps['tfidf'].get_feature_names_out()\n","        return self.transformed_data\n","\n","    def get_top_features(self, n_features=20):\n","        \"\"\"Get top features with enhanced filtering\"\"\"\n","        if not self.fitted:\n","            raise ValueError(\"The vectorizer pipeline is not fitted yet. Call 'fit_transform' first.\")\n","\n","        tfidf = self.pipeline.named_steps['tfidf']\n","        feature_scores = np.asarray(self.transformed_data.sum(axis=0)).ravel()\n","\n","        feature_score_pairs = [\n","            (feature, score)\n","            for feature, score in zip(self.feature_names, feature_scores)\n","            if self._is_valid_feature(feature)\n","        ]\n","\n","        sorted_pairs = sorted(feature_score_pairs, key=lambda x: x[1], reverse=True)\n","        return sorted_pairs[:n_features]\n","\n","    def visualize_top_features(self, n_features=20):\n","        \"\"\"Visualize top features with enhanced formatting\"\"\"\n","        if not self.fitted:\n","            raise ValueError(\"The vectorizer pipeline is not fitted yet. Call 'fit_transform' first.\")\n","\n","        top_features = self.get_top_features(n_features)\n","\n","        plt.figure(figsize=(12, 8))\n","        colors = sns.color_palette(\"husl\", n_colors=n_features)\n","\n","        bars = plt.barh([feature for feature, _ in top_features],\n","                       [score for _, score in top_features],\n","                       color=colors)\n","\n","        plt.title('Top Features by TF-IDF Score', fontsize=14, pad=20)\n","        plt.xlabel('TF-IDF Score', fontsize=12)\n","        plt.ylabel('Feature', fontsize=12)\n","\n","        for bar in bars:\n","            width = bar.get_width()\n","            plt.text(width, bar.get_y() + bar.get_height()/2,\n","                    f'{width:.2f}',\n","                    ha='left', va='center', fontsize=10)\n","\n","        plt.tight_layout()\n","        plt.show()\n","\n","try:\n","    vectorizer = AdvancedVectorizer(\n","        max_features=5000,\n","        ngram_range=(1, 2),\n","        max_df=0.7,\n","        min_df=5,\n","        custom_stop_words={\n","            'custom', 'stopwords', 'here',\n","            'thing', 'stuff', 'item', 'ones'\n","        }\n","    )\n","\n","    transformed_data = vectorizer.fit_transform(train_df['cleaned_reviews'])\n","\n","    transformed_df = pd.DataFrame(\n","        transformed_data.toarray(),\n","        columns=[f'feature_{i}' for i in range(transformed_data.shape[1])]\n","    )\n","\n","    vectorizer.visualize_top_features()\n","\n","    top_features = vectorizer.get_top_features(20)\n","    print(\"\\nTop 20 meaningful features:\")\n","    for feature, score in top_features:\n","        print(f\"{feature}: {score:.4f}\")\n","\n","    X_train, X_val, y_train, y_val = train_test_split(\n","        transformed_data, train_df['sentiments'],\n","        test_size=0.2, random_state=42\n","    )\n","\n","except NameError:\n","    print(NameError)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"0o-9wPbLGT0q","executionInfo":{"status":"ok","timestamp":1731684491089,"user_tz":-480,"elapsed":6563,"user":{"displayName":"Bryan Noel Salindeho","userId":"08284959670553716651"}},"outputId":"6d874d4b-2033-429b-eb4f-710b891c876e"},"execution_count":10,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x800 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","Top 20 meaningful features:\n","not: 256.8896\n","very: 219.7094\n","great: 195.1815\n","shoe: 194.9337\n","but: 191.9088\n","comfortable: 162.6869\n","love: 147.3764\n","fit: 144.5025\n","good: 143.7132\n","like: 142.5923\n","size: 137.4541\n","wear: 136.6914\n","would: 131.6324\n","look: 130.1360\n","one: 127.5425\n","well: 126.2767\n","bought: 116.6608\n","price: 114.4255\n","quality: 112.5339\n","pair: 110.6591\n"]}]},{"cell_type":"markdown","source":["## Step 5: Implementing Feedforward Neural Network Classifier\n"],"metadata":{"id":"bNaPP13Kuomn"}},{"cell_type":"code","source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from torch.utils.data import Dataset, DataLoader\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n","import seaborn as sns\n","import plotly.express as px\n","import plotly.graph_objects as go\n","from plotly.subplots import make_subplots\n","from sklearn.metrics import roc_curve, auc, precision_recall_curve\n","import wordcloud\n","from collections import Counter\n","import time\n","\n","\n","class SentimentDataset(Dataset):\n","    def __init__(self, features, labels=None):\n","        features_dense = features.toarray()\n","        self.features = torch.FloatTensor(features_dense)\n","        self.labels = torch.LongTensor(labels.values) if labels is not None else None  # Convert Series to NumPy array\n","\n","    def __len__(self):\n","        return len(self.features)\n","\n","    def __getitem__(self, idx):\n","        if self.labels is not None:\n","            return self.features[idx], self.labels[idx]\n","        else:\n","            return self.features[idx]\n","\n","class SentimentClassifier(nn.Module):\n","    def __init__(self, input_dim, hidden_dims=[256, 128], dropout_rate=0.3):\n","        super(SentimentClassifier, self).__init__()\n","\n","        layers = []\n","        prev_dim = input_dim\n","\n","        for dim in hidden_dims:\n","            layers.extend([\n","                nn.Linear(prev_dim, dim),\n","                nn.ReLU(),\n","                nn.BatchNorm1d(dim),\n","                nn.Dropout(dropout_rate)\n","            ])\n","            prev_dim = dim\n","\n","        layers.append(nn.Linear(prev_dim, 2))  # 2 classes: positive and negative\n","\n","        self.model = nn.Sequential(*layers)\n","\n","    def forward(self, x):\n","        return self.model(x)\n","\n","class SentimentAnalyzer:\n","    def __init__(self,\n","                 hidden_dims=[256, 128],\n","                 dropout_rate=0.3,\n","                 learning_rate=0.001,\n","                 batch_size=32,\n","                 num_epochs=10,\n","                 device='cuda' if torch.cuda.is_available() else 'cpu'):\n","\n","        self.hidden_dims = hidden_dims\n","        self.dropout_rate = dropout_rate\n","        self.learning_rate = learning_rate\n","        self.batch_size = batch_size\n","        self.num_epochs = num_epochs\n","        self.device = device\n","        self.model = None\n","        self.history = {'train_loss': [], 'val_loss': [],\n","                       'train_acc': [], 'val_acc': []}\n","\n","    def create_data_loaders(self, X_train, y_train, X_val=None, y_val=None):\n","        \"\"\"Create training and validation data loaders\"\"\"\n","        train_dataset = SentimentDataset(X_train, y_train)\n","        train_loader = DataLoader(train_dataset, batch_size=self.batch_size, shuffle=True)\n","\n","        val_loader = None\n","        if X_val is not None and y_val is not None:\n","            val_dataset = SentimentDataset(X_val, y_val)\n","            val_loader = DataLoader(val_dataset, batch_size=self.batch_size)\n","\n","        return train_loader, val_loader\n","\n","    def train(self, X_train, y_train, X_val=None, y_val=None):\n","        \"\"\"Train the sentiment classifier\"\"\"\n","        input_dim = X_train.shape[1]\n","        self.model = SentimentClassifier(input_dim, self.hidden_dims, self.dropout_rate).to(self.device)\n","\n","        train_loader, val_loader = self.create_data_loaders(X_train, y_train, X_val, y_val)\n","\n","        optimizer = optim.Adam(self.model.parameters(), lr=self.learning_rate)\n","        criterion = nn.CrossEntropyLoss()\n","\n","        for epoch in range(self.num_epochs):\n","            self.model.train()\n","            train_loss = 0\n","            train_correct = 0\n","            train_total = 0\n","\n","            for batch_features, batch_labels in train_loader:\n","                batch_features = batch_features.to(self.device)\n","                batch_labels = batch_labels.to(self.device)\n","\n","                optimizer.zero_grad()\n","                outputs = self.model(batch_features)\n","                loss = criterion(outputs, batch_labels)\n","                loss.backward()\n","                optimizer.step()\n","\n","                train_loss += loss.item()\n","                _, predicted = torch.max(outputs.data, 1)\n","                train_total += batch_labels.size(0)\n","                train_correct += (predicted == batch_labels).sum().item()\n","\n","            train_loss = train_loss / len(train_loader)\n","            train_acc = 100 * train_correct / train_total\n","\n","            if val_loader is not None:\n","                val_loss, val_acc = self.evaluate(val_loader, criterion)\n","                print(f'Epoch [{epoch+1}/{self.num_epochs}], '\n","                      f'Train Loss: {train_loss:.4f}, Train Acc: {train_acc:.2f}%, '\n","                      f'Val Loss: {val_loss:.4f}, Val Acc: {val_acc:.2f}%')\n","\n","                self.history['val_loss'].append(val_loss)\n","                self.history['val_acc'].append(val_acc)\n","            else:\n","                print(f'Epoch [{epoch+1}/{self.num_epochs}], '\n","                      f'Train Loss: {train_loss:.4f}, Train Acc: {train_acc:.2f}%')\n","\n","            self.history['train_loss'].append(train_loss)\n","            self.history['train_acc'].append(train_acc)\n","\n","    def evaluate(self, data_loader, criterion):\n","        \"\"\"Evaluate the model on the given data loader\"\"\"\n","        self.model.eval()\n","        total_loss = 0\n","        correct = 0\n","        total = 0\n","\n","        with torch.no_grad():\n","            for features, labels in data_loader:\n","                features = features.to(self.device)\n","                labels = labels.to(self.device)\n","\n","                outputs = self.model(features)\n","                loss = criterion(outputs, labels)\n","                total_loss += loss.item()\n","\n","                _, predicted = torch.max(outputs.data, 1)\n","                total += labels.size(0)\n","                correct += (predicted == labels).sum().item()\n","\n","        return total_loss / len(data_loader), 100 * correct / total\n","\n","    def predict(self, X):\n","        \"\"\"Make predictions on new data\"\"\"\n","        self.model.eval()\n","        dataset = SentimentDataset(X)\n","        data_loader = DataLoader(dataset, batch_size=self.batch_size)\n","        predictions = []\n","        all_probabilities = []\n","\n","        with torch.no_grad():\n","            for features in data_loader:\n","                features = features.to(self.device)\n","                outputs = self.model(features)\n","                probabilities = torch.softmax(outputs, dim=1)\n","                _, predicted = torch.max(probabilities.data, 1)\n","\n","                predictions.extend(predicted.cpu().numpy())\n","                all_probabilities.extend(probabilities.cpu().numpy())\n","\n","        return np.array(predictions), np.array(all_probabilities)\n","\n","    def plot_training_history(self):\n","        high_epoch = 0\n","        max_accuracy = 0\n","        index = 1\n","        \"\"\"Plot training history\"\"\"\n","        plt.figure(figsize=(12, 4))\n","\n","        plt.subplot(1, 2, 1)\n","        plt.plot(self.history['train_loss'], label='Train Loss')\n","        if 'val_loss' in self.history and self.history['val_loss']:\n","            plt.plot(self.history['val_loss'], label='Val Loss')\n","        plt.title('Validation Loss')\n","        plt.xlabel('Epoch')\n","        plt.ylabel('Loss')\n","        plt.legend()\n","\n","        plt.subplot(1, 2, 2)\n","        plt.plot(self.history['train_acc'], label='Train Acc')\n","        if 'val_acc' in self.history and self.history['val_acc']:\n","            plt.plot(self.history['val_acc'], label='Val Acc')\n","            for index, accuracy in enumerate(self.history['val_acc']):\n","              if accuracy > max_accuracy:\n","                  max_accuracy = accuracy\n","                  high_epoch = index + 1\n","\n","        plt.title('Validation Accuracy')\n","        plt.xlabel('Epoch')\n","        plt.ylabel('Accuracy (%)')\n","        plt.legend()\n","\n","        plt.tight_layout()\n","        plt.show()\n","\n","        print(\"maximum accuracy: \", round(max_accuracy, 2), \"%\")\n","        print(\"high epoch: \", high_epoch)\n","\n","    def plot_confusion_matrix(self, y_true, y_pred):\n","        \"\"\"Plot confusion matrix\"\"\"\n","        cm = confusion_matrix(y_true, y_pred)\n","        plt.figure(figsize=(8, 6))\n","        sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')\n","        plt.title('Confusion Matrix')\n","        plt.ylabel('True Label')\n","        plt.xlabel('Predicted Label')\n","        plt.show()\n","\n","\n","    def plot_interactive_training_history(self):\n","        \"\"\"Create an interactive training history plot using Plotly\"\"\"\n","        fig = make_subplots(\n","            rows=2, cols=2,\n","            subplot_titles=('Loss Curves', 'Accuracy Curves',\n","                          'Loss Distribution', 'Accuracy Progression')\n","        )\n","\n","        fig.add_trace(\n","            go.Scatter(y=self.history['train_loss'], name='Train Loss',\n","                      line=dict(color='blue', width=2)), row=1, col=1)\n","        if self.history['val_loss']:\n","            fig.add_trace(\n","                go.Scatter(y=self.history['val_loss'], name='Val Loss',\n","                          line=dict(color='red', width=2)), row=1, col=1)\n","\n","        fig.add_trace(\n","            go.Scatter(y=self.history['train_acc'], name='Train Acc',\n","                      line=dict(color='green', width=2)), row=1, col=2)\n","        if self.history['val_acc']:\n","            fig.add_trace(\n","                go.Scatter(y=self.history['val_acc'], name='Val Acc',\n","                          line=dict(color='orange', width=2)), row=1, col=2)\n","\n","        fig.add_trace(\n","            go.Histogram(x=self.history['train_loss'], name='Train Loss Dist',\n","                        nbinsx=20, histnorm='probability'), row=2, col=1)\n","\n","        epochs = list(range(1, len(self.history['train_acc']) + 1))\n","        fig.add_trace(\n","            go.Scatter(x=epochs, y=self.history['train_acc'],\n","                      mode='lines+markers',\n","                      name='Accuracy Progress'), row=2, col=2)\n","\n","        fig.update_layout(height=800, width=1200, showlegend=True,\n","                         title_text=\"Detailed Training Analysis\")\n","        fig.show()\n","\n","    def plot_roc_and_pr_curves(self, X_val, y_val):\n","        \"\"\"Plot ROC and PR curves using Plotly\"\"\"\n","        self.model.eval()\n","        with torch.no_grad():\n","            probs = torch.softmax(self.model(torch.FloatTensor(X_val).to(self.device)), dim=1)\n","            y_proba = probs.cpu().numpy()[:, 1]\n","\n","        fpr, tpr, _ = roc_curve(y_val, y_proba)\n","        roc_auc = auc(fpr, tpr)\n","\n","        precision, recall, _ = precision_recall_curve(y_val, y_proba)\n","        pr_auc = auc(recall, precision)\n","\n","        fig = make_subplots(rows=1, cols=2,\n","                           subplot_titles=('ROC Curve', 'Precision-Recall Curve'))\n","\n","        fig.add_trace(\n","            go.Scatter(x=fpr, y=tpr,\n","                      name=f'ROC (AUC = {roc_auc:.3f})',\n","                      line=dict(color='darkorange', width=2)),\n","            row=1, col=1\n","        )\n","        fig.add_trace(\n","            go.Scatter(x=[0, 1], y=[0, 1],\n","                      name='Random',\n","                      line=dict(color='navy', dash='dash')),\n","            row=1, col=1\n","        )\n","\n","        fig.add_trace(\n","            go.Scatter(x=recall, y=precision,\n","                      name=f'PR (AUC = {pr_auc:.3f})',\n","                      line=dict(color='green', width=2)),\n","            row=1, col=2\n","        )\n","\n","        fig.update_layout(height=500, width=1200,\n","                         title_text=\"Model Performance Curves\")\n","        fig.show()\n","\n","    def plot_prediction_confidence(self, X):\n","        \"\"\"Plot prediction confidence distribution\"\"\"\n","        self.model.eval()\n","        with torch.no_grad():\n","            probs = torch.softmax(self.model(torch.FloatTensor(X).to(self.device)), dim=1)\n","            confidences = torch.max(probs, dim=1)[0].cpu().numpy()\n","            predictions = torch.argmax(probs, dim=1).cpu().numpy()\n","\n","        fig = go.Figure()\n","\n","        for class_idx in [0, 1]:\n","            mask = predictions == class_idx\n","            fig.add_trace(go.Histogram(\n","                x=confidences[mask],\n","                name=f'Class {class_idx}',\n","                opacity=0.7,\n","                nbinsx=30\n","            ))\n","\n","        fig.update_layout(\n","            title=\"Prediction Confidence Distribution\",\n","            xaxis_title=\"Confidence Score\",\n","            yaxis_title=\"Count\",\n","            barmode='overlay',\n","            height=500,\n","            width=800\n","        )\n","        fig.show()\n","\n","    def analyze_misclassifications(self, X_val, y_val, texts=None):\n","        \"\"\"Analyze misclassified examples\"\"\"\n","        predictions = self.predict(X_val)\n","        misclassified = predictions != y_val\n","\n","        print(f\"Total misclassified examples: {misclassified.sum()}\")\n","        print(f\"Misclassification rate: {misclassified.sum() / len(y_val):.2%}\")\n","\n","        if texts is not None:\n","            print(\"\\nSample misclassified texts:\")\n","            misclassified_indices = np.where(misclassified)[0]\n","            for idx in misclassified_indices[:5]:\n","                print(f\"\\nTrue label: {y_val[idx]}, Predicted: {predictions[idx]}\")\n","                print(f\"Text: {texts[idx][:200]}...\")\n","\n","    def plot_training_time_analysis(self):\n","        \"\"\"Plot training time analysis\"\"\"\n","        if not hasattr(self, 'epoch_times'):\n","            print(\"No timing information available\")\n","            return\n","\n","        fig = go.Figure()\n","        fig.add_trace(go.Scatter(\n","            x=list(range(1, len(self.epoch_times) + 1)),\n","            y=self.epoch_times,\n","            mode='lines+markers',\n","            name='Training Time'\n","        ))\n","\n","        fig.update_layout(\n","            title=\"Training Time Analysis\",\n","            xaxis_title=\"Epoch\",\n","            yaxis_title=\"Time (seconds)\",\n","            height=400,\n","            width=800\n","        )\n","        fig.show()\n","\n","        print(f\"Average time per epoch: {np.mean(self.epoch_times):.2f} seconds\")\n","\n","    def modified_train(self, X_train, y_train, X_val=None, y_val=None):\n","        \"\"\"Modified training method with timing analysis\"\"\"\n","        self.epoch_times = []\n","\n","        start_time = time.time()\n","        super().train(X_train, y_train, X_val, y_val)\n","        total_time = time.time() - start_time\n","\n","        print(f\"\\nTraining completed in {total_time:.2f} seconds\")\n","        self.plot_training_time_analysis()\n","\n","analyzer = SentimentAnalyzer(\n","    hidden_dims=[256, 128, 128],\n","    dropout_rate=0.6,\n","    learning_rate=0.0005,\n","    batch_size=32,\n","    num_epochs=10\n",")\n","\n","analyzer.train(X_train, y_train, X_val, y_val)\n","\n","analyzer.plot_training_history()\n","y_pred = analyzer.predict(X_val)\n","analyzer.plot_confusion_matrix(y_val, y_pred)\n","analyzer.plot_interactive_training_history()\n","analyzer.plot_roc_and_pr_curves(X_val, y_val)\n","analyzer.plot_prediction_confidence(X_val)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":921},"id":"rYFHYhV_Ia0P","executionInfo":{"status":"error","timestamp":1731684657417,"user_tz":-480,"elapsed":43746,"user":{"displayName":"Bryan Noel Salindeho","userId":"08284959670553716651"}},"outputId":"1e7298be-0061-42c6-f6b0-8b1fd5710461"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch [1/10], Train Loss: 0.7118, Train Acc: 58.23%, Val Loss: 0.4823, Val Acc: 89.74%\n","Epoch [2/10], Train Loss: 0.4652, Train Acc: 79.76%, Val Loss: 0.2641, Val Acc: 92.64%\n","Epoch [3/10], Train Loss: 0.2946, Train Acc: 89.12%, Val Loss: 0.2177, Val Acc: 92.30%\n","Epoch [4/10], Train Loss: 0.2087, Train Acc: 92.89%, Val Loss: 0.2107, Val Acc: 92.64%\n","Epoch [5/10], Train Loss: 0.1514, Train Acc: 95.02%, Val Loss: 0.2155, Val Acc: 92.51%\n","Epoch [6/10], Train Loss: 0.1209, Train Acc: 95.93%, Val Loss: 0.2410, Val Acc: 91.90%\n","Epoch [7/10], Train Loss: 0.1094, Train Acc: 96.32%, Val Loss: 0.2352, Val Acc: 92.37%\n","Epoch [8/10], Train Loss: 0.0911, Train Acc: 97.06%, Val Loss: 0.2523, Val Acc: 91.83%\n","Epoch [9/10], Train Loss: 0.0804, Train Acc: 97.18%, Val Loss: 0.2715, Val Acc: 92.03%\n","Epoch [10/10], Train Loss: 0.0721, Train Acc: 97.65%, Val Loss: 0.2874, Val Acc: 91.36%\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x400 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["maximum accuracy:  92.64 %\n","high epoch:  2\n"]},{"output_type":"error","ename":"ValueError","evalue":"Found input variables with inconsistent numbers of samples: [1481, 2]","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-12-49291202b9d3>\u001b[0m in \u001b[0;36m<cell line: 397>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    395\u001b[0m \u001b[0manalyzer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot_training_history\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    396\u001b[0m \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0manalyzer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_val\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 397\u001b[0;31m \u001b[0manalyzer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot_confusion_matrix\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_val\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    398\u001b[0m \u001b[0manalyzer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot_interactive_training_history\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    399\u001b[0m \u001b[0manalyzer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot_roc_and_pr_curves\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_val\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_val\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-12-49291202b9d3>\u001b[0m in \u001b[0;36mplot_confusion_matrix\u001b[0;34m(self, y_true, y_pred)\u001b[0m\n\u001b[1;32m    216\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mplot_confusion_matrix\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    217\u001b[0m         \u001b[0;34m\"\"\"Plot confusion matrix\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 218\u001b[0;31m         \u001b[0mcm\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconfusion_matrix\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    219\u001b[0m         \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m8\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m6\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    220\u001b[0m         \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mheatmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcm\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mannot\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfmt\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'd'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcmap\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'Blues'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/_param_validation.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    211\u001b[0m                     )\n\u001b[1;32m    212\u001b[0m                 ):\n\u001b[0;32m--> 213\u001b[0;31m                     \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    214\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mInvalidParameterError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    215\u001b[0m                 \u001b[0;31m# When the function is just a wrapper around an estimator, we allow\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py\u001b[0m in \u001b[0;36mconfusion_matrix\u001b[0;34m(y_true, y_pred, labels, sample_weight, normalize)\u001b[0m\n\u001b[1;32m    340\u001b[0m     \u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mint64\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mint64\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mint64\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mint64\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    341\u001b[0m     \"\"\"\n\u001b[0;32m--> 342\u001b[0;31m     \u001b[0my_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_check_targets\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    343\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0my_type\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m\"binary\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"multiclass\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    344\u001b[0m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"%s is not supported\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0my_type\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py\u001b[0m in \u001b[0;36m_check_targets\u001b[0;34m(y_true, y_pred)\u001b[0m\n\u001b[1;32m    101\u001b[0m     \"\"\"\n\u001b[1;32m    102\u001b[0m     \u001b[0mxp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_namespace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 103\u001b[0;31m     \u001b[0mcheck_consistent_length\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    104\u001b[0m     \u001b[0mtype_true\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtype_of_target\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"y_true\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    105\u001b[0m     \u001b[0mtype_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtype_of_target\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_pred\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"y_pred\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_consistent_length\u001b[0;34m(*arrays)\u001b[0m\n\u001b[1;32m    455\u001b[0m     \u001b[0muniques\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlengths\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    456\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0muniques\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 457\u001b[0;31m         raise ValueError(\n\u001b[0m\u001b[1;32m    458\u001b[0m             \u001b[0;34m\"Found input variables with inconsistent numbers of samples: %r\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    459\u001b[0m             \u001b[0;34m%\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ml\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0ml\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mlengths\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Found input variables with inconsistent numbers of samples: [1481, 2]"]}]},{"cell_type":"code","source":[],"metadata":{"id":"-G0l-Vgj7AEr"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Step 6: Predict on Test Data"],"metadata":{"id":"3vzwkkljxbzX"}},{"cell_type":"code","source":["test_path = '/content/drive/My Drive/AI DM PROJECT/test.json'\n","if os.path.exists(test_path):\n","  print(\"Test file founded\")\n","  df = pd.read_json(test_path)\n","  print(f\"Data shape: {df.shape}\")\n","  print(\"\\nFirst few rows:\")\n","  print(df.head(2))\n","  test_df = df\n","else:\n","  print(\"File not founded\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yd2qmY45w-KC","executionInfo":{"status":"ok","timestamp":1731684685989,"user_tz":-480,"elapsed":1049,"user":{"displayName":"Bryan Noel Salindeho","userId":"08284959670553716651"}},"outputId":"db133c46-f1fc-4a5f-b9cc-e2a31f28297d"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Test file founded\n","Data shape: (1851, 1)\n","\n","First few rows:\n","                                             reviews\n","0  I bought 2 sleepers.  sleeper had holes in the...\n","1  I dare say these are just about the sexiest th...\n"]}]},{"cell_type":"markdown","source":["Clean test data"],"metadata":{"id":"qn6q4i5yx5nR"}},{"cell_type":"code","source":["if test_df is not None:\n","    print(\"Data Info:\")\n","    print(test_df.info())\n","\n","    print(\"\\nMissing Values:\")\n","    print(test_df.isnull().sum())\n","\n","cleaner = TextCleaner()\n","\n","if 'test_df' in locals():\n","    print(\"\\nProcessing training data:\")\n","    test_df['cleaned_reviews'] = cleaner.process_reviews(test_df['reviews'])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"c8bwWlFwxynM","executionInfo":{"status":"ok","timestamp":1731684690172,"user_tz":-480,"elapsed":1591,"user":{"displayName":"Bryan Noel Salindeho","userId":"08284959670553716651"}},"outputId":"033e63b3-8fd3-4455-f3d5-36633d443d89"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["Data Info:\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 1851 entries, 0 to 1850\n","Data columns (total 1 columns):\n"," #   Column   Non-Null Count  Dtype \n","---  ------   --------------  ----- \n"," 0   reviews  1851 non-null   object\n","dtypes: object(1)\n","memory usage: 14.6+ KB\n","None\n","\n","Missing Values:\n","reviews    0\n","dtype: int64\n","\n","Processing training data:\n","\n","Original: I bought 2 sleepers.  sleeper had holes in the arm pit area and the other sleeper had a whole where ...\n","Cleaned:  bought 2 sleeper sleeper hole in arm pit area sleeper whole neck trim should sewed real waste money...\n","\n","Original: I dare say these are just about the sexiest things I've ever worn. Oh I've had and have G-strings, h...\n","Cleaned:  dare say sexiest thing ever worn oh g-string pretty skimpy one too but crotchless g-string masquradi...\n","\n","Original: everything about the transaction (price, delivery time, quality of item) was great.  I wouldn't hesi...\n","Cleaned:  everything transaction price delivery time quality item great would not hesitate purchase something ...\n","\n","Original: Not bad for just a shirt.  Very durable, and matched my teams colors perfectly.  Its just a shirt, b...\n","Cleaned:  not bad shirt very durable matched team color perfectly shirt but helped team go greatness...\n","\n","Original: These are truly wrinkle free and longer than the average womans botton down, which I love!!   Overal...\n","Cleaned:  truly wrinkle free longer average woman botton love overall fabulous shirt not beat price...\n"]}]},{"cell_type":"code","source":["X_test_transformed = vectorizer.transform(test_df['cleaned_reviews'])\n","predictions, probabilities = analyzer.predict(X_test_transformed)\n","\n","submission_df = pd.DataFrame({\n","    'reviews': test_df['reviews'],\n","    'cleaned_reviews': test_df['cleaned_reviews'],\n","    'sentiments': predictions,\n","    'probability_0': [prob[0] for prob in probabilities],\n","    'probability_1': [prob[1] for prob in probabilities]\n","})\n","\n","submission_df.to_csv('submission.csv', index=False)\n","\n","good_reviews_df = submission_df[submission_df['sentiments'] == 1]\n","bad_reviews_df = submission_df[submission_df['sentiments'] == 0]\n","\n","good_reviews_df = good_reviews_df.sort_values(by='probability_1', ascending=True)\n","bad_reviews_df = bad_reviews_df.sort_values(by='probability_0', ascending=True)\n","\n","good_reviews_df.to_csv('good_reviews.csv', index=False)\n","bad_reviews_df.to_csv('bad_reviews.csv', index=False)\n","\n","print(submission_df.head(10))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Pgg3XCJxyPDW","executionInfo":{"status":"ok","timestamp":1731684692780,"user_tz":-480,"elapsed":945,"user":{"displayName":"Bryan Noel Salindeho","userId":"08284959670553716651"}},"outputId":"6c8f9537-a571-43d8-fa08-9a1b3184c916"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["                                             reviews  \\\n","0  I bought 2 sleepers.  sleeper had holes in the...   \n","1  I dare say these are just about the sexiest th...   \n","2  everything about the transaction (price, deliv...   \n","3  Not bad for just a shirt.  Very durable, and m...   \n","4  These are truly wrinkle free and longer than t...   \n","5  I love naughty monkey! I'm so happy with their...   \n","6  I fell in love with this boot when I first saw...   \n","7  These shades are a great buy.  Fast shipping, ...   \n","8  There was no picture of this selection, so I g...   \n","9  This leather briefcase was exactly what I was ...   \n","\n","                                     cleaned_reviews  sentiments  \\\n","0  bought 2 sleeper sleeper hole in arm pit area ...           0   \n","1  dare say sexiest thing ever worn oh g-string p...           1   \n","2  everything transaction price delivery time qua...           1   \n","3  not bad shirt very durable matched team color ...           1   \n","4  truly wrinkle free longer average woman botton...           1   \n","5       love naughty monkey happy shoe not hurt foot           1   \n","6  fell in love boot first saw another store webs...           1   \n","7  shade great buy fast shipping great price good...           1   \n","8  no picture selection guessed ringer type t-shi...           1   \n","9  leather briefcase exactly looking leather smoo...           1   \n","\n","   probability_0  probability_1  \n","0       0.946666       0.053334  \n","1       0.004127       0.995873  \n","2       0.012408       0.987592  \n","3       0.005782       0.994218  \n","4       0.004797       0.995203  \n","5       0.004693       0.995307  \n","6       0.002675       0.997325  \n","7       0.001295       0.998705  \n","8       0.451901       0.548099  \n","9       0.002166       0.997834  \n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","plt.figure(figsize=(6, 4))\n","sentiment_counts = pd.Series(predictions).value_counts()\n","\n","plt.bar(sentiment_counts.index.astype(str), sentiment_counts.values, color=['skyblue', 'lightcoral'])\n","plt.xlabel('Sentiment')\n","plt.ylabel('Count')\n","plt.title('Sentiment Distribution (0 vs 1)')\n","plt.xticks(sentiment_counts.index.astype(str))\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":410},"id":"puDAsgC2zBrD","executionInfo":{"status":"ok","timestamp":1731575007467,"user_tz":-480,"elapsed":325,"user":{"displayName":"Bryan Noel Salindeho","userId":"08284959670553716651"}},"outputId":"43a87ccc-92d0-427d-93cb-221e26f83ebe"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 600x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}